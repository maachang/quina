package quina.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import quina.annotation.proxy.ProxyInitialSetting;
import quina.annotation.proxy.ProxyInjectMethod;
import quina.annotation.proxy.ProxyOverride;

/**
 * AbstractProxyStatement.
 */
abstract class AbstractQuinaProxyStatement
	implements Statement {
	
	// ProxyConnection.
	protected QuinaProxyConnection connection;
	
	/**
	 * Statementを取得.
	 * @return Statement 対象のステートメントが返却されます.
	 */
	protected abstract Statement getStatement();
	
	/**
	 * Statementを設定.
	 * @param s 対象のステートメントを設定します
	 */
	protected abstract void setStatement(Statement s);
	
	/**
	 * 初期設定.
	 * @param connection ProxyConnectionを設定します.
	 * @param statement 元のStatementを設定します.
	 */
	@ProxyInitialSetting
	protected void setting(QuinaProxyConnection connection,
		Statement statement) {
		if(connection == null || statement == null) {
			throw new NullPointerException();
		}
		this.connection = connection;
		setStatement(statement);
	}
	
	@ProxyInjectMethod
	protected void checkClose() throws SQLException {
		connection.checkClose();
		if(getStatement() == null) {
			throw new SQLException("It's already closed.");
		}
	}
	
	@ProxyOverride
	public void close() throws SQLException {
		Statement s = getStatement();
		setStatement(null);
		if(s != null) {
			getStatement().close();
		}
	}
	
	@ProxyOverride
	public boolean isClosed() throws SQLException {
		if(connection.isClosed()) {
			try {
				close();
			} catch(Exception e) {}
			return true;
		}
		return getStatement() == null;
	}
	
	@ProxyOverride
	public ResultSet executeQuery(String sql)
		throws SQLException {
		checkClose();
		return QuinaProxyUtil.getResultSet(this,
			getStatement().executeQuery(
			connection.getSQL(sql)));
	}

	@ProxyOverride
	public int executeUpdate(String sql)
		throws SQLException {
		checkClose();
		return getStatement().executeUpdate(
			connection.getSQL(sql));
	}
	
	@ProxyOverride
	public boolean execute(String sql)
		throws SQLException {
		checkClose();
		return getStatement().execute(
			connection.getSQL(sql));
	}
	
	@ProxyOverride
	public void addBatch(String sql)
		throws SQLException {
		checkClose();
		getStatement().addBatch(
			connection.getSQL(sql));
	}
	
	@ProxyOverride
	public int executeUpdate(String sql, int autoGeneratedKeys)
		throws SQLException {
		checkClose();
		return getStatement().executeUpdate(
			connection.getSQL(sql), autoGeneratedKeys);
	}

	@ProxyOverride
	public int executeUpdate(String sql, int[] columnIndexes)
		throws SQLException {
		checkClose();
		return getStatement().executeUpdate(
			connection.getSQL(sql), columnIndexes);
	}

	@ProxyOverride
	public int executeUpdate(String sql, String[] columnNames)
		throws SQLException {
		checkClose();
		return getStatement().executeUpdate(
			connection.getSQL(sql), columnNames);
	}

	@ProxyOverride
	public boolean execute(String sql, int autoGeneratedKeys)
		throws SQLException {
		checkClose();
		return getStatement().execute(
			connection.getSQL(sql), autoGeneratedKeys);
	}

	@ProxyOverride
	public boolean execute(String sql, int[] columnIndexes)
		throws SQLException {
		checkClose();
		return getStatement().execute(
			connection.getSQL(sql), columnIndexes);
	}

	@ProxyOverride
	public boolean execute(String sql, String[] columnNames)
		throws SQLException {
		checkClose();
		return getStatement().execute(
			connection.getSQL(sql), columnNames);
	}
	
	@ProxyOverride
	public Connection getConnection() throws SQLException {
		checkClose();
		return connection;
	}

	@ProxyOverride
	public ResultSet getResultSet() throws SQLException {
		checkClose();
		return QuinaProxyUtil.getResultSet(
			this, getStatement().getResultSet());
	}
}
